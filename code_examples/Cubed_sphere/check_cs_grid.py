#------------------------------------------------------------------------------
# filename  : check_cs_grid.py
# author    : Ki-Hwan Kim  (kh.kim@kiaps.org)
# affilation: KIAPS (Korea Institute of Atmospheric Prediction Systems)
# update    : 2015.9.8      srart
#
#
# description: 
#   Check the cubed-sphere grid generated by make_cs_grid.py
#------------------------------------------------------------------------------

from __future__ import division
import numpy as np
import netCDF4 as nc
import sys
import re

from numpy.testing import assert_equal as equal
from numpy.testing import assert_array_equal as a_equal
from numpy.testing import assert_array_almost_equal as aa_equal




def check_consistency_mvps(ncf):
    print 'check consistency: mvps...'

    size = len( ncf.dimensions['size'] )
    mvps = ncf.variables['mvps'][:]

    exclude_neg = lambda arr, seq: [k for k in arr[seq] if k != -1]

    for seq in xrange(size):
        mvp0 = exclude_neg(mvps, seq)

        for m in mvp0:
            mvp1 = exclude_neg(mvps, m)

            for i in xrange(4):
                mvp1_roll = np.roll(mvp1,i)
                if mvp1_roll[0] == seq: break

            a_equal(mvp0, mvp1_roll)




def check_consistency_uids_gids(ncf):
    print 'check consistency: is_uvps, uids and gids...'

    size = len( ncf.dimensions['size'] )
    is_uvps = ncf.variables['is_uvps'][:]
    uids = ncf.variables['uids'][:]
    gids = ncf.variables['gids'][:]

    u_seq = 0
    for seq in xrange(size):
        if is_uvps[seq]:
            equal(uids[seq], u_seq)
            equal(gids[u_seq], seq)
            u_seq += 1




def check_indices_nbrs(ncf):
    print 'check indices: nbrs...'

    ne = len( ncf.dimensions['ne'] )
    ngq = len( ncf.dimensions['ngq'] )
    size = len( ncf.dimensions['size'] )
    gq_indices = ncf.variables['gq_indices'][:]
    nbrs = ncf.variables['nbrs'][:]

    ij2seq = dict()
    for seq in xrange(size):
        ij = tuple(gq_indices[seq])
        ij2seq[ij] = seq

    a_equal(nbrs[ ij2seq[(1,1,1,1,1)] ], 
            [ij2seq[(1,1,1,2,1)], ij2seq[(1,1,1,2,2)], \
             ij2seq[(1,1,1,1,2)], ij2seq[(4,ne,1,ngq-1,2)], \
             ij2seq[(4,ne,1,ngq-1,1)], ij2seq[(5,1,ne,2,ngq-1)], \
             -1, -1])

    a_equal(nbrs[ ij2seq[(1,1,1,2,1)] ], 
            [ij2seq[(1,1,1,3,1)], ij2seq[(1,1,1,3,2)], \
             ij2seq[(1,1,1,2,2)], ij2seq[(1,1,1,1,2)], \
             ij2seq[(1,1,1,1,1)], ij2seq[(5,1,ne,1,ngq-1)], \
             ij2seq[(5,1,ne,2,ngq-1)], ij2seq[(5,1,ne,3,ngq-1)] ])

    a_equal(nbrs[ ij2seq[(1,1,1,ngq,1)] ], 
            [ij2seq[(1,1,1,ngq,2)], ij2seq[(1,1,1,ngq-1,2)], \
             ij2seq[(1,1,1,ngq-1,1)], ij2seq[(5,1,ne,ngq-1,ngq-1)], \
             ij2seq[(5,1,ne,ngq,ngq-1)], ij2seq[(5,2,ne,2,ngq-1)], \
             ij2seq[(5,2,ne,2,ngq)], ij2seq[(1,2,1,2,2)] ])

    a_equal(nbrs[ ij2seq[(1,1,1,1,2)] ], 
            [ij2seq[(1,1,1,1,1)], ij2seq[(1,1,1,2,1)], \
             ij2seq[(1,1,1,2,2)], ij2seq[(1,1,1,2,3)], \
             ij2seq[(1,1,1,1,3)], ij2seq[(4,ne,1,ngq-1,3)], \
             ij2seq[(4,ne,1,ngq-1,2)], ij2seq[(4,ne,1,ngq-1,1)] ])

    a_equal(nbrs[ ij2seq[(1,1,1,2,2)] ], 
            [ij2seq[(1,1,1,1,1)], ij2seq[(1,1,1,2,1)], \
             ij2seq[(1,1,1,3,1)], ij2seq[(1,1,1,3,2)], \
             ij2seq[(1,1,1,3,3)], ij2seq[(1,1,1,2,3)], \
             ij2seq[(1,1,1,1,3)], ij2seq[(1,1,1,1,2)] ])

    a_equal(nbrs[ ij2seq[(1,1,1,ngq,2)] ], 
            [ij2seq[(1,1,1,ngq,3)], ij2seq[(1,1,1,ngq-1,3)], \
             ij2seq[(1,1,1,ngq-1,2)], ij2seq[(1,1,1,ngq-1,1)], \
             ij2seq[(1,1,1,ngq,1)], ij2seq[(1,2,1,2,1)], \
             ij2seq[(1,2,1,2,2)], ij2seq[(1,2,1,2,3)] ])

    a_equal(nbrs[ ij2seq[(1,1,1,1,ngq)] ], 
            [ij2seq[(1,1,1,1,ngq-1)], ij2seq[(1,1,1,2,ngq-1)], \
             ij2seq[(1,1,1,2,ngq)], ij2seq[(1,1,2,2,2)], \
             ij2seq[(1,1,2,1,2)], ij2seq[(4,ne,2,ngq-1,2)], \
             ij2seq[(4,ne,2,ngq-1,1)], ij2seq[(4,ne,1,ngq-1,ngq-1)] ])

    a_equal(nbrs[ ij2seq[(1,1,1,ngq,ngq)] ], 
            [ij2seq[(1,1,1,ngq-1,ngq)], ij2seq[(1,1,1,ngq-1,ngq-1)], \
             ij2seq[(1,1,1,ngq,ngq-1)], ij2seq[(1,2,1,2,ngq-1)], \
             ij2seq[(1,2,1,2,ngq)], ij2seq[(1,2,2,2,2)], \
             ij2seq[(1,2,2,1,2)], ij2seq[(1,1,2,ngq-1,2)] ])




if __name__ == '__main__':
    fpath = sys.argv[1]

    ne = int( re.search('ne([0-9]+)',fpath).group(1) )
    ngq = int( re.search('ngq([0-9]+)',fpath).group(1) )
    print 'ne=%d, ngq=%d'%(ne, ngq) 

    ncf = nc.Dataset(fpath, 'r', format='NETCDF4')
    check_consistency_mvps(ncf)
    check_consistency_uids_gids(ncf)
    check_indices_nbrs(ncf)
